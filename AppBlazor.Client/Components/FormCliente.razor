@inject NavigationManager navigationManager2
@inject LibroService libroService
@inject TipoLibroService tipolibroService
@inject JefeService jefeService
@inject ClienteService clienteService

<h2>@titulo</h2>

<EditForm Model="@oClienteFormCLS" OnValidSubmit="@GuardarCambios">
    <DataAnnotationsValidator />
    <div class="mt-3">
        <label>Codigo Cliente</label>
        <InputNumber readonly class="form-control" @bind-Value="oClienteFormCLS.CodigoCliente" disabled="@(CodigoCliente != 0)" />
        <ValidationMessage For="(() => oClienteFormCLS.CodigoCliente)" />
    </div>

    <div class="mt-3">
        <label>Nombre Cliente</label>
        <InputText class="form-control" @bind-Value="oClienteFormCLS.NombreCliente" />
        <ValidationMessage For="(() => oClienteFormCLS.NombreCliente)" />
    </div>

    <div class="mt-3">
        <label>Seleccione Representante Ventas</label>
        <InputSelect class="form-control" @bind-Value="oClienteFormCLS.idRepresentante">
            <option value="0">--Seleccione--</option>
            @foreach (var item in listarepresentantes)
            {
                <option value="@item.NroEmpleado">@item.Nombre</option>
            }
        </InputSelect>
        <ValidationMessage For="(() => oClienteFormCLS.idRepresentante)" />
    </div>


    <div class="mt-3">
        <label>Limite Credito</label>
        <InputNumber class="form-control" @bind-Value="oClienteFormCLS.LimiteCredito" />
        <ValidationMessage For="(() => oClienteFormCLS.LimiteCredito)" />
    </div>

    <div class="mt-3">
        <button type="submit" class="btn btn-success">Guardar</button>
        <button type="button" class="btn btn-danger" @onclick="regresar">Regresar</button>
    </div>
</EditForm>


@code {



    public ClienteFormCLS oClienteFormCLS { get; set; } = new ClienteFormCLS();
    [Parameter]
    public int CodigoCliente { get; set; }


    public string titulo { get; set; } = "";

    public List<LibroListCLS> listarepresentantes { get; set; } = new List<LibroListCLS>();


    protected override Task OnInitializedAsync()
    {

        listarepresentantes = libroService.listarlibros();

        if (CodigoCliente == 0) titulo = "Agregar Cliente";
        else
        {
            titulo = "Editar Cliente";
            oClienteFormCLS = clienteService.recuperarClientePorId(CodigoCliente);
        }
        return base.OnInitializedAsync();
    }
    private void GuardarCambios()
    {
        if (titulo == "Agregar Cliente")
        {
            clienteService.guardarCliente(oClienteFormCLS);
            navigationManager2.NavigateTo("/listaclientes");
        }
        else
        {
            // Editar libro existente
            clienteService.guardarCliente(oClienteFormCLS); // actualizar libro
            Console.WriteLine($"Cliente '{oClienteFormCLS.NombreCliente}' editado correctamente."); // mensaje en consola
            navigationManager2.NavigateTo("/listaclientes"); // vuelve a lista
        }
    }

    private void regresar()
    {
        Navigation.NavigateTo("/listaclientes");
    }
    [Inject]
    public NavigationManager Navigation { get; set; } = default!;
}